"<h1>Big O Notation ဆိုတာဘာလဲ</h1>\n<p><img src=\"https://www.bigocheatsheet.com/img/big-o-complexity-chart.png\" alt=\"Big O Notation Cheat Sheet\"></p>\n<p>Big O Notation ဆိုတာက algorithm selection နှင့် performance tuning လုပ်တဲ့အခါမှာ သုံးပါတယ်။ Big O Notation မှာ Time Complexity နဲ့  Space Complexity ဆိုပြီး နှစ်ခုရှိပါတယ်။</p>\n<p>Time Complexity ဆိုတာက algorithms တစ်ခုက input size ပေါ် မှာမူတည်ပြီး algorithm ကို run estimated duration ကိုပြောတာပါ။</p>\n<p>Space complexity ဆိုတာ algorithm တစ်ခုကို run တဲ့အခါမှာ required memory amount (bytes, kilobytes, etc.) ကို input size (n) ပေါ် မှာမူတည်ပြီး ခန့်မှုန်းတဲ့နေရာမှာသုံး ပါတယ်။</p>\n<p>Big O Notation ဆိုတာကဟာ Programmer တိုင်းသိထားသင့်တဲ့ mathematical notation တစ်ခုဖြစ်ပါတယ်။ Code ရေးတတ်တာ alone နဲ့ မလုံလောက်ဘူး။ Algorithm ရဲ့ performance နားလည်ဖို့ Big O Notation သိထားသင့်တယ်။</p>\n<h2>Time Complexity တွက်ခြင်း</h2>\n<p>Time Complexity ဆိုတာက Algorithm တစ်ခုပြုလုပ်တဲ့အချိန် ကြာချိန်ကို input အရွယ်အစားပေါ် မူတည်ပြီး ခန့်မှန်းဖော်ပြတဲ့အရာပဲ။</p>\n<h3>ဉပမာများ</h3>\n<ol>\n<li><strong>Example 1: Constant Space Complexity (O(1))</strong></li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_first_element</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">any</span>]</span>):\r\n    <span class=\"hljs-keyword\">return</span> n[<span class=\"hljs-number\">0</span>]\n</code></pre>\n<p>ဒီမှာကတော့ <code>get_first_element</code> ဆိုတဲ့ function တစ်ခုပါ။ သူက တခြား linear loop တွေလည်းမသုံးရသလို တစ်ခါတည်းနဲ့ပြီး (အချိန်မပြောင်း) တာမလို့ Access Time လို့လည်းခေါ်လို့ရတဲ့ Time Complexity တစ်ခုလည်းဖြစ်ပါတယ်။ သူက Time Complexity တွေထဲမှာအမြန်ဆုံးဖြစ်ပါတယ်။</p>\n<ol start=\"2\">\n<li><strong>Logarithmic Time Complexity (O(log n))</strong></li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">any</span>], target: <span class=\"hljs-built_in\">any</span></span>) -> <span class=\"hljs-built_in\">int</span>:\r\n    low, high = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">while</span> low &#x3C;= high:\r\n        mid = (low + high) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> arr[mid] == target:\r\n            <span class=\"hljs-keyword\">return</span> mid\r\n        <span class=\"hljs-keyword\">elif</span> arr[mid] &#x3C; target:\r\n            low = mid + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            high = mid - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>ဒါကတော့ binary search algorithm တစ်ခုဖြစ်ပြီးတော့ logarithmic time complexity <code>O(log n)</code> ရှိပါတယ်။ သူက Linear Time Complexity <code>O(n)</code> ထက်မြန်ပါတယ်။\r\nပြောရမယ်ဆိုရင်တော့ input size <code>n</code> က grow လာသမျှတိုင်း steps တွေကလည်း logarithmically အရ problem ရဲ့ size <code>n</code> ကို တစ်၀က်ဖျက်သွားမှာပါ။</p>\n<p>ဉပမာပြောရမယ်ဆိုရင်</p>\n<ul>\n<li>Step 1 → 16 items</li>\n<li>Step 2 → 8</li>\n<li>Step 3 → 4</li>\n<li>Step 4 → 2</li>\n<li>Step 5 → 1</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Linear Space Complexity</strong> (O(n))</li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_all</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -> <span class=\"hljs-built_in\">int</span>:\r\n    result = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr:\r\n        result = i + result\r\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p>ဒီ function မှာဆိုရင် <code>add_all</code> ဆိုတဲ့ problem ကို solve ဖို့အတွက် <code>n</code> မှာပါသမျှကို သုံးရပါမယ် အဲ့တာကြောင့် arr ကိုတစ်ခါတည်း loop ရတာဖြစ်တဲ့အပြင် တခြား additional loop တွေမသုံးရတာကြောင့် Linear Time (O(n)) input size အတိုင်းသာ loop ဖြစ်ပါတယ်။</p>\n<h2>Space Complexity တွက်ခြင်း</h2>\n<h3>ဥပမာများ</h3>\n<ol>\n<li><strong>Constant Space Complexity</strong> (O(1))</li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_numbers</span>(<span class=\"hljs-params\">a, b</span>):\r\n    <span class=\"hljs-keyword\">return</span> a + b\n</code></pre>\n<p><code>add_numbers</code> ဆိုတဲ့ function က input size (a, b) ဘယ်လောက်ပဲ ကြီးနေပါစေ additional memory ကိုထပ်မသုံးတာကြောင့် constant space complexity (<code>O(1)</code>) ဖြစ်ပါတယ်။</p>\n<ol start=\"2\">\n<li><strong>Example 2: Linear Space Complexity</strong> (O(n))</li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_list</span>(<span class=\"hljs-params\">n</span>):\r\n    arr = []\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        arr.append(i)\r\n    <span class=\"hljs-keyword\">return</span> arr\n</code></pre>\n<p><code>create_list</code> ဆိုတဲ့ function မှာ input size n က <code>arr</code> ဆိုတဲ့ variable ကို n-size (input size) အဖြစ် memory size grow ဖြစ်တာကြောင့် linear space complexity, <code>O(n)</code> ဖြစ်ပါတယ်။.</p>\n<ol start=\"3\">\n<li><strong>Recursive Space Complexity</strong></li>\n</ol>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> n * factorial(n - <span class=\"hljs-number\">1</span>)\n</code></pre>\n<p>recursive function က recursion depth (n) အထိ stack call memory ထဲမှာ result တွေကိုသိမ်းတာ ကြောင့်မလို့ O(n) space complexity ဖြစ်ပါတယ်။</p>\n<p>Big O Notation က algorithms ရဲ့ efficiency ဖို့ရည်ရွယ်ပါတယ်။ Big O Notation က algorithm တွေရဲ့ performance ကို input size နဲ့တူ duration နဲ့ memory (storage) ကို estimate လုပ်တဲ့ နေရာမှာ အရေးပါပါတယ်။</p>\n<p>Learn More: <a href=\"https://www.bigocheatsheet.com/\">Big O Cheat Sheet</a></p>"