"<h1>Getting Started With Generic Type</h1>\n<p>Generic Type is a feature in programming that allows you to create classes, functions, and data structures that can operate on any data type without sacrificing type safety.</p>\n<p>Without knowing generic type, you might use <code>any</code> in Typescript.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">returnWhatIsPassed</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">any</span></span>) {\r\n    <span class=\"hljs-keyword\">return</span> value\r\n}\n</code></pre>\n<p>However, using any sacrifices type safety.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> returnWhatIsPassed&#x3C;T>(<span class=\"hljs-attr\">value</span>: T): T {\r\n    <span class=\"hljs-keyword\">return</span> value\r\n}\n</code></pre>\n<p>This function works with any data type while ensuring that the input and output are of the same type.</p>\n<h2>Example of Generic Type in Action</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> getFirstElement&#x3C;T>(<span class=\"hljs-attr\">arr</span>: T[]): T {\r\n    <span class=\"hljs-keyword\">return</span> arr[<span class=\"hljs-number\">0</span>]\r\n}\r\n\r\n<span class=\"hljs-keyword\">let</span> firstNumber = getFirstElement&#x3C;<span class=\"hljs-built_in\">number</span>>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) <span class=\"hljs-comment\">// 1</span>\r\n<span class=\"hljs-keyword\">let</span> firstString = getFirstElement&#x3C;<span class=\"hljs-built_in\">string</span>>([<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>]) <span class=\"hljs-comment\">// \"a\"</span>\n</code></pre>\n<p>In this example, getFirstElement works with both numbers and strings while maintaining type safety.</p>\n<p>Using generic types enhances the flexibility, safety, and readability of your code. Instead of relying on any, generics ensure that your functions and classes work correctly with different data types while maintaining clear and predictable behavior.</p>"